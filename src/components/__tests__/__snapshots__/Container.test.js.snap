// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Container renders 1`] = `
<DragDropContext(Tool)
  actions={
    Object {
      "getWordListForVerse": [Function],
      "loadLexiconEntry": [Function],
      "setToolSettings": [Function],
      "showPopover": [Function],
    }
  }
  appLanguage="en"
  contextIdReducer={Object {}}
  currentToolViews={Object {}}
  projectDetailsReducer={Object {}}
  resourcesReducer={
    Object {
      "bibles": Array [],
      "lexicons": Object {},
    }
  }
  selectionsReducer={
    Object {
      "selections": Array [
        Object {
          "text": "text",
        },
      ],
    }
  }
  settingsReducer={
    Object {
      "toolsSettings": Object {
        "ScripturePane": Object {
          "currentPaneSettings": Array [],
        },
      },
    }
  }
  tc={
    Object {
      "appLanguage": "en",
      "closeLoading": [Function],
      "contextId": Object {
        "reference": Object {
          "chapter": 1,
          "verse": 1,
        },
      },
      "readProjectData": [Function],
      "showDialog": [Function],
      "showLoading": [Function],
      "sourceChapter": Object {},
      "sourceVerse": Object {
        "verseObjects": Array [],
      },
      "targetChapter": Object {},
      "targetVerseText": "",
      "writeProjectData": [Function],
    }
  }
  translate={[Function]}
  wordAlignmentReducer={
    Object {
      "alignmentData": Object {},
    }
  }
>
  <Tool
    actions={
      Object {
        "getWordListForVerse": [Function],
        "loadLexiconEntry": [Function],
        "setToolSettings": [Function],
        "showPopover": [Function],
      }
    }
    appLanguage="en"
    contextIdReducer={Object {}}
    currentToolViews={Object {}}
    projectDetailsReducer={Object {}}
    resourcesReducer={
      Object {
        "bibles": Array [],
        "lexicons": Object {},
      }
    }
    selectionsReducer={
      Object {
        "selections": Array [
          Object {
            "text": "text",
          },
        ],
      }
    }
    settingsReducer={
      Object {
        "toolsSettings": Object {
          "ScripturePane": Object {
            "currentPaneSettings": Array [],
          },
        },
      }
    }
    tc={
      Object {
        "appLanguage": "en",
        "closeLoading": [Function],
        "contextId": Object {
          "reference": Object {
            "chapter": 1,
            "verse": 1,
          },
        },
        "readProjectData": [Function],
        "showDialog": [Function],
        "showLoading": [Function],
        "sourceChapter": Object {},
        "sourceVerse": Object {
          "verseObjects": Array [],
        },
        "targetChapter": Object {},
        "targetVerseText": "",
        "writeProjectData": [Function],
      }
    }
    translate={[Function]}
    wordAlignmentReducer={
      Object {
        "alignmentData": Object {},
      }
    }
  >
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
    >
      <TestContextContainer
        actions={
          Object {
            "getWordListForVerse": [Function],
            "loadLexiconEntry": [Function],
            "setToolSettings": [Function],
            "showPopover": [Function],
          }
        }
        appLanguage="en"
        contextIdReducer={Object {}}
        currentToolViews={Object {}}
        projectDetailsReducer={Object {}}
        resourcesReducer={
          Object {
            "bibles": Array [],
            "lexicons": Object {},
          }
        }
        selectionsReducer={
          Object {
            "selections": Array [
              Object {
                "text": "text",
              },
            ],
          }
        }
        settingsReducer={
          Object {
            "toolsSettings": Object {
              "ScripturePane": Object {
                "currentPaneSettings": Array [],
              },
            },
          }
        }
        tc={
          Object {
            "appLanguage": "en",
            "closeLoading": [Function],
            "contextId": Object {
              "reference": Object {
                "chapter": 1,
                "verse": 1,
              },
            },
            "readProjectData": [Function],
            "showDialog": [Function],
            "showLoading": [Function],
            "sourceChapter": Object {},
            "sourceVerse": Object {
              "verseObjects": Array [],
            },
            "targetChapter": Object {},
            "targetVerseText": "",
            "writeProjectData": [Function],
          }
        }
        toolIsReady={true}
        translate={[Function]}
        wordAlignmentReducer={
          Object {
            "alignmentData": Object {},
          }
        }
      >
        <DragDropContext(Connect(Container))
          actions={
            Object {
              "getWordListForVerse": [Function],
              "loadLexiconEntry": [Function],
              "setToolSettings": [Function],
              "showPopover": [Function],
            }
          }
          appLanguage="en"
          contextIdReducer={Object {}}
          currentToolViews={Object {}}
          projectDetailsReducer={Object {}}
          resourcesReducer={
            Object {
              "bibles": Array [],
              "lexicons": Object {},
            }
          }
          selectionsReducer={
            Object {
              "selections": Array [
                Object {
                  "text": "text",
                },
              ],
            }
          }
          settingsReducer={
            Object {
              "toolsSettings": Object {
                "ScripturePane": Object {
                  "currentPaneSettings": Array [],
                },
              },
            }
          }
          tc={
            Object {
              "appLanguage": "en",
              "closeLoading": [Function],
              "contextId": Object {
                "reference": Object {
                  "chapter": 1,
                  "verse": 1,
                },
              },
              "readProjectData": [Function],
              "showDialog": [Function],
              "showLoading": [Function],
              "sourceChapter": Object {},
              "sourceVerse": Object {
                "verseObjects": Array [],
              },
              "targetChapter": Object {},
              "targetVerseText": "",
              "writeProjectData": [Function],
            }
          }
          toolIsReady={true}
          translate={[Function]}
          wordAlignmentReducer={
            Object {
              "alignmentData": Object {},
            }
          }
        >
          <Connect(Container)
            actions={
              Object {
                "getWordListForVerse": [Function],
                "loadLexiconEntry": [Function],
                "setToolSettings": [Function],
                "showPopover": [Function],
              }
            }
            appLanguage="en"
            contextIdReducer={Object {}}
            currentToolViews={Object {}}
            projectDetailsReducer={Object {}}
            resourcesReducer={
              Object {
                "bibles": Array [],
                "lexicons": Object {},
              }
            }
            selectionsReducer={
              Object {
                "selections": Array [
                  Object {
                    "text": "text",
                  },
                ],
              }
            }
            settingsReducer={
              Object {
                "toolsSettings": Object {
                  "ScripturePane": Object {
                    "currentPaneSettings": Array [],
                  },
                },
              }
            }
            tc={
              Object {
                "appLanguage": "en",
                "closeLoading": [Function],
                "contextId": Object {
                  "reference": Object {
                    "chapter": 1,
                    "verse": 1,
                  },
                },
                "readProjectData": [Function],
                "showDialog": [Function],
                "showLoading": [Function],
                "sourceChapter": Object {},
                "sourceVerse": Object {
                  "verseObjects": Array [],
                },
                "targetChapter": Object {},
                "targetVerseText": "",
                "writeProjectData": [Function],
              }
            }
            toolIsReady={true}
            translate={[Function]}
            wordAlignmentReducer={
              Object {
                "alignmentData": Object {},
              }
            }
          >
            <Container
              actions={
                Object {
                  "getWordListForVerse": [Function],
                  "loadLexiconEntry": [Function],
                  "setToolSettings": [Function],
                  "showPopover": [Function],
                }
              }
              alignTargetToken={[Function]}
              alignedTokens={Array []}
              appLanguage="en"
              chapterAlignments={Object {}}
              clearAlignmentSuggestions={[Function]}
              clearState={[Function]}
              contextIdReducer={Object {}}
              currentToolViews={Object {}}
              indexChapterAlignments={[Function]}
              moveSourceToken={[Function]}
              normalizedSourceVerseText=""
              normalizedTargetVerseText=""
              projectDetailsReducer={Object {}}
              repairVerse={[Function]}
              resetVerse={[Function]}
              resourcesReducer={
                Object {
                  "bibles": Array [],
                  "lexicons": Object {},
                }
              }
              selectionsReducer={
                Object {
                  "selections": Array [
                    Object {
                      "text": "text",
                    },
                  ],
                }
              }
              setAlignmentPredictions={[Function]}
              settingsReducer={
                Object {
                  "toolsSettings": Object {
                    "ScripturePane": Object {
                      "currentPaneSettings": Array [],
                    },
                  },
                }
              }
              sourceTokens={Array []}
              targetTokens={Array []}
              tc={
                Object {
                  "appLanguage": "en",
                  "closeLoading": [Function],
                  "contextId": Object {
                    "reference": Object {
                      "chapter": 1,
                      "verse": 1,
                    },
                  },
                  "readProjectData": [Function],
                  "showDialog": [Function],
                  "showLoading": [Function],
                  "sourceChapter": Object {},
                  "sourceVerse": Object {
                    "verseObjects": Array [],
                  },
                  "targetChapter": Object {},
                  "targetVerseText": "",
                  "writeProjectData": [Function],
                }
              }
              toolIsReady={true}
              translate={[Function]}
              unalignTargetToken={[Function]}
              verseAlignments={Array []}
              verseIsValid={false}
              wordAlignmentReducer={
                Object {
                  "alignmentData": Object {},
                }
              }
            >
              <div
                style={
                  Object {
                    "display": "flex",
                    "height": "100%",
                    "width": "100%",
                  }
                }
              >
                <DropTarget(DroppableWordList)
                  chapter={1}
                  onDropTargetToken={[Function]}
                  verse={1}
                  words={Array []}
                >
                  <DroppableWordList
                    canDrop={false}
                    chapter={1}
                    connectDropTarget={[Function]}
                    isOver={false}
                    onDropTargetToken={[Function]}
                    verse={1}
                    words={Array []}
                  >
                    <div
                      id="wordList"
                      style={
                        Object {
                          "backgroundColor": "#DCDCDC",
                          "flex": 0.2,
                          "overflowY": "auto",
                          "padding": "5px 8px 5px 5px",
                          "width": "100%",
                        }
                      }
                    >
                      <WordList
                        chapter={1}
                        isOver={false}
                        verse={1}
                        words={Array []}
                      />
                    </div>
                  </DroppableWordList>
                </DropTarget(DroppableWordList)>
                <div
                  style={
                    Object {
                      "display": "flex",
                      "flex": 0.8,
                      "flexDirection": "column",
                      "height": "100%",
                      "width": "100%",
                    }
                  }
                >
                  <div />
                  <AlignmentGrid
                    actions={
                      Object {
                        "getWordListForVerse": [Function],
                        "loadLexiconEntry": [Function],
                        "setToolSettings": [Function],
                        "showPopover": [Function],
                      }
                    }
                    alignments={Array []}
                    contextId={
                      Object {
                        "reference": Object {
                          "chapter": 1,
                          "verse": 1,
                        },
                      }
                    }
                    lexicons={Object {}}
                    onDropSourceToken={[Function]}
                    onDropTargetToken={[Function]}
                    translate={[Function]}
                  >
                    <div
                      id="AlignmentGrid"
                      style={
                        Object {
                          "alignContent": "flex-start",
                          "backgroundColor": "#ffffff",
                          "display": "flex",
                          "flexGrow": 2,
                          "flexWrap": "wrap",
                          "overflowY": "auto",
                          "padding": "0px 10px 10px",
                        }
                      }
                    />
                  </AlignmentGrid>
                  <MAPControls
                    onAccept={[Function]}
                    onRefresh={[Function]}
                    onReject={[Function]}
                  >
                    <div
                      style={
                        Object {
                          "boxShadow": "rgba(0, 0, 0, 0.21) 0px -5px 5px 0px",
                          "padding": "0 10px",
                          "textAlign": "center",
                          "width": "100%",
                        }
                      }
                    >
                      <MuiThemeProvider>
                        <ActionInfo
                          style={
                            Object {
                              "color": "var(--accent-color-dark)",
                              "cursor": "pointer",
                              "height": 30,
                              "marginRight": "5px",
                              "verticalAlign": "middle",
                              "width": 30,
                            }
                          }
                        >
                          <ActionInfo
                            style={
                              Object {
                                "color": "var(--accent-color-dark)",
                                "cursor": "pointer",
                                "height": 30,
                                "marginRight": "5px",
                                "verticalAlign": "middle",
                                "width": 30,
                              }
                            }
                          >
                            <SvgIcon
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              style={
                                Object {
                                  "color": "var(--accent-color-dark)",
                                  "cursor": "pointer",
                                  "height": 30,
                                  "marginRight": "5px",
                                  "verticalAlign": "middle",
                                  "width": 30,
                                }
                              }
                              viewBox="0 0 24 24"
                            >
                              <svg
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                style={
                                  Object {
                                    "color": "var(--accent-color-dark)",
                                    "cursor": "pointer",
                                    "display": "inline-block",
                                    "fill": "currentColor",
                                    "height": 30,
                                    "marginRight": "5px",
                                    "muiPrepared": true,
                                    "transition": "all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms",
                                    "userSelect": "none",
                                    "verticalAlign": "middle",
                                    "width": 30,
                                  }
                                }
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"
                                />
                              </svg>
                            </SvgIcon>
                          </ActionInfo>
                        </ActionInfo>
                      </MuiThemeProvider>
                      <SecondaryButton
                        disabled={false}
                        onClick={[Function]}
                        style={
                          Object {
                            "marginLeft": 10,
                          }
                        }
                      >
                        <button
                          className="btn-second"
                          disabled={false}
                          onClick={[Function]}
                        >
                          Refresh suggestions
                        </button>
                      </SecondaryButton>
                      <SecondaryButton
                        disabled={false}
                        onClick={[Function]}
                        style={
                          Object {
                            "marginLeft": 10,
                          }
                        }
                      >
                        <button
                          className="btn-second"
                          disabled={false}
                          onClick={[Function]}
                        >
                          Accept suggestions
                        </button>
                      </SecondaryButton>
                      <SecondaryButton
                        disabled={false}
                        onClick={[Function]}
                        style={
                          Object {
                            "marginLeft": 10,
                          }
                        }
                      >
                        <button
                          className="btn-second"
                          disabled={false}
                          onClick={[Function]}
                        >
                          Reject suggestions
                        </button>
                      </SecondaryButton>
                    </div>
                  </MAPControls>
                </div>
              </div>
            </Container>
          </Connect(Container)>
        </DragDropContext(Connect(Container))>
      </TestContextContainer>
    </Provider>
  </Tool>
</DragDropContext(Tool)>
`;
